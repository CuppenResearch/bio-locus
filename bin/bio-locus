#!/usr/bin/env ruby
#

USAGE = "Use --help for info\n"

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

if ARGV.size == 0
  print USAGE
end

require 'bio-locus'
require 'optparse'

options = {task: nil, db: 'locus.db', show_help: false}
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\ne.g. #{File.basename($0)} test.txt"

  o.on("--store", 'Create a cache file') do
    options[:task] = :store
  end
  o.on("--match", 'Match a cache file') do
    options[:task] = :match
  end

  o.on("--include-alt", 'Include chr+pos+ALT VCF field to filter') do
    options[:include_alt] = true
  end

  o.on("--db filename",String,"Use db file") do | fn |
    options[:db] = fn
  end

  o.on("-q", "--quiet", "Run quietly") do |q|
    options[:quiet] = true
  end
   
  o.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end
   
  o.on("-d", "--debug", "Debug mode") do |v|
    options[:debug] = true
  end
   
  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

begin
  opts.parse!(ARGV)

 $stderr.print "bio-locus #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2014\n" if !options[:quiet]

  if options[:show_help] 
    print opts 
    print USAGE
    exit 1
  end

  $stderr.print "Options: ",options,"\n" if !options[:quiet]

rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

case options[:task] 
  when :store then
    require 'bio-locus/store'
    BioLocus::Store.run(options)
  when :match then
    require 'bio-locus/match'
    BioLocus::Match.run(options)
  else
    raise "I do not know what to do!"
end
