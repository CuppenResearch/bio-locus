#!/usr/bin/env ruby
#

USAGE = "Use --help for info\n"

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

if ARGV.size == 0
  print USAGE
end

require 'bio-locus'
require 'optparse'

options = {task: nil, db: 'locus.db', show_help: false, header: 1, in_format: :vcf, alt: :include, storage: :YAML}
opts = OptionParser.new do |o|
  o.banner = "Usage: #{File.basename($0)} [options] filename\ne.g. #{File.basename($0)} test.txt"

  o.on("--store", 'Create or add to a cache file') do
    options[:task] = :store
  end

  o.on("--storage [:TokyoCabinet,:LocalMemCache]", [:TokyoCabinet,:LocalMemCache], 'Cache type (default :TokyoCabinet)') do |t|
    options[:storage] = t
  end

  o.on("--delete", 'Remove matches from a cache file') do
    options[:task] = :delete
  end

  o.on("--match", 'Match a cache file') do
    options[:task] = :match
  end

  # o.on("--include-alt", 'Include chr+pos+ALT VCF field to filter') do
  #   options[:include_alt] = true
  # end

  o.on('--alt [include,exclude,only]', [:include,:exclude,:only],
  'Include, exclude, only ALT (default include)') do |par|
    options[:alt] = par.to_sym
  end

  # o.on("--only-alt", 'Only look for chr+pos+ALT field in filter') do
  #   options[:only_alt] = true
  # end

  # o.on("--exclude-alt", 'Override adding chr+pos+ALT field to store') do
  #   options[:exclude_alt] = true
  # end

  o.on("--db filename",String,"Use db file") do | fn |
    options[:db] = fn
  end

  o.on('--in-format [vcf,tab,cosmic,snv]', [:vcf,:tab,:cosmic,:snv], 'Input format (default vcf)') do |par|
    options[:in_format] = par.to_sym
  end

  o.on("--eval-chr expr",String,"Evaluate record to retrieve chr name (default field[0])") do | expr |
    options[:eval_chr] = expr
  end

  o.on("--eval-pos expr",String,"Evaluate record to retrieve position (default field[1])") do | expr |
    options[:eval_pos] = expr
  end

  o.on("--eval-alt expr",String,"Evaluate record to retrieve alt list (default field[4])") do | expr |
    options[:eval_alt] = expr
  end
  
  o.on("--header num", "Header lines (default 1)") do |l|
    options[:header] = l.to_i
  end

  o.on("-q", "--quiet", "Run quietly") do |q|
    options[:quiet] = true
  end
   
  o.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end
   
  o.on("-d", "--debug", "Debug mode") do |v|
    options[:debug] = true
  end

  o.on("-i", "--ignore-errors", "Continue on error") do 
    options[:ignore_errors] = true
  end

  o.on("--once", "Only one copy stored/matched") do |q|
    options[:once] = true
  end
   

  o.separator ""
  o.on_tail('-h', '--help', 'display this help and exit') do
    options[:show_help] = true
  end
end

begin
  opts.parse!(ARGV)

 $stderr.print "bio-locus #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2014\n" if !options[:quiet]

  if options[:show_help] 
    print opts 
    print USAGE
    exit 1
  end

  $stderr.print "Options: ",options,"\n" if !options[:quiet]

rescue OptionParser::InvalidOption => e
  options[:invalid_argument] = e.message
end

(0..options[:header]).each { STDIN.gets }

case options[:task] 
  when :store then
    require 'bio-locus/store'
    BioLocus::Store.run(options)
  when :match ,:delete then
    require 'bio-locus/match'
    BioLocus::Match.run(options)
  else
    raise "I do not know what to do!"
end
